%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Tmux conf
file_extensions:
  - tmux.conf
  - .tmux.conf
scope: source.tmux

# MARK:--

contexts:
  main:
    # MARK: control flow

    - match: '(^%|\s%)(if|elif|else|endif)\b'
      scope: keyword.control.conditional.tmux

    # MARK: Tmux cmd

    - match: \b(bind|unbind)(-key)?\b
      scope: support.function.tmux
    - include: set_cmd__ctx
    - include: select_cmd__ctx
    - match: \b({{cmd__var}})\b
      scope: support.function.tmux

    - match: \s-[a-zA-Z]+
      scope: variable.parameter.option.tmux
    - match: \bon\b
      scope: constant.language.boolean.true.tmux
    - match: \boff\b
      scope: constant.language.boolean.false.tmux

    # MARK: str, num, cmt

    - match: "'"
      scope: punctuation.definition.string.begin.tmux
      push:
        - meta_scope: string.quoted.double.tmux
        - match: "'"
          scope: punctuation.definition.string.end.tmux
          pop: true
        - match: \\$
          scope: punctuation.separator.continuation.line.tmux

    - match: '"'
      scope: punctuation.definition.string.begin.tmux
      push:
        - meta_scope: string.quoted.double.tmux
        - match: '"'
          scope: punctuation.definition.string.end.tmux
          pop: true
        - match: \\"
          scope: constant.character.escape.tmux
        - match: (#)({)
          captures:
            1: punctuation.definition.variable.tmux
            2: punctuation.section.expansion.parameter.begin.tmux
          push: fmt__ctx
        - match: \\\$
          scope: constant.character.escape.tmux
        - match: (\$)({{shell_chars__var}})
          captures:
            1: punctuation.definition.variable.shell
            2: variable.other.readwrite.shell
        - match: (\$)({)
          captures:
            1: punctuation.definition.variable.shell
            2: punctuation.section.expansion.parameter.begin.shell
          push:
            - match: \\\}
              scope: constant.character.escape.shell
            - match: \}
              scope: punctuation.section.expansion.parameter.end.shell
              pop: true
            - match: \\\$
              scope: constant.character.escape.shell
            - match: "{{shell_chars__var}}"
              scope: variable.other.readwrite.shell
        - match: \\$
          scope: punctuation.separator.continuation.tmux

    - match: '\s[\+\-]\d+\b'
      scope: constant.numeric.tmux
    - match: \b\d+\b
      scope: constant.numeric.tmux

    - match: ^\s*(#.*)$
      scope: comment.line.number-sign.tmux
    - match: \s#.*
      scope: comment.line.number-sign.tmux

  # MARK:- cmd ctx

  set_cmd__ctx:
    - match: \b(set(-buffer|-environment|-hook|-mark|b|env))\b
      scope: support.function.tmux
    - match: \b(setw|set-window-option)\b
      scope: support.function.tmux
    - match: \b(set(-option)?)\b
      scope: support.function.tmux

  select_cmd__ctx:
    - match: \b(select(-layout|l))\b
      scope: support.function.tmux
    - match: \b({{layout_name__var}})\b
      # scope: variable.parameter.select-layout.tmux
      # scope: variable.other.constant.select-layout.tmux
      scope: constant.language.select-layout.tmux

  # MARK: more ctx

  fmt__ctx:
    # https://man.openbsd.org/OpenBSD-current/man1/tmux.1#FORMATS
    - meta_scope: meta.group.expansion.parameter.tmux
    - match: \\}
      scope: constant.character.escape.tmux
    - match: \}
      scope: punctuation.section.expansion.parameter.end.tmux
      pop: true
    - match: (#)({)
      captures:
        1: punctuation.definition.variable.tmux
        2: punctuation.section.expansion.parameter.begin.tmux
      push: fmt__ctx
    - match: \S
      scope: variable.other.readwrite.tmux

# MARK:- cmd vars

variables:
  shell_chars__var: "[a-zA-Z_][a-zA-Z_0-9]*"
  cmd__var: "\
    {{prior_cmd__var}}|{{misc_cmd__var}}|{{window_pane_cmd__var}}|\
    {{client_session_cmd__var}}|{{key_cmd__var}}|{{buffer_cmd__var}}|\
    {{copy_mode_cmd__var}}|{{status_cmd__var}}"
  prior_cmd__var: "\
    copy-mode|\
    display(-menu|-message|-popup|-panes|p)?|\
    ls(b|cm|c|k|p|w)?|\
    lock(-client|-server|-session|c|s)?|\
    new(-window|-session|w)?|\
    next-(layout|matching-bracket|paragraph|prompt|space(-end)?|word(-end)?|window)|\
    next(l)?|\
    refresh(-client|-from-pane)?|\
    rename(-window|-session|w)?|\
    show-(buffer|environment|hook|messages|options|prompt-history)|\
    show(b|env|msgs|phist)?|\
    source(-file)?|\
    start(-of-line|-server)?|\
    switch(-client|c)"
  # Ref: Manual page: Clients And Sessions
  client_session_cmd__var: "\
    attach(-session)?|detach(-client)?|has(-session)?|kill-(server|session)|\
    list-(clients|commands|sessions)|server-access|suspend(-client|c)"
  # Ref: Manual page: Windows And Panes: copy-mode
  # > The following commands are supported in copy mode.
  copy_mode_cmd__var: "\
    append-selection(-and-cancel)?|back-to-indentation|begin-selection|\
    bottom-line|cancel|clear-selection|\
    copy-(\
    (end-of-line(-and-cancel)?)|(line(-and-cancel)?)|\
    (pipe-end-of-line(-and-cancel)?)|\
    (pipe-line(-and-cancel)?)|\
    (pipe(-no-clear|-and-cancel)?)|\
    (selection(-no-clear|-and-cancel)?)\
    )|\
    cursor-((down(-and-cancel)?)|left|right|up)|\
    end-of-line|goto-line|\
    halfpage-(down(-and-cancel)?|up|bottom|top)|\
    history-(bottom|top)|\
    jump-(again|backward|forward|reverse|to-(backward|forward|mark))|\
    middle-line|other-end|page-(down(-and-cancel)?|up)|\
    pipe(-no-clear|-and-cancel)?|\
    previous-(matching-bracket|paragraph|prompt|word|space)|\
    rectangle-(on|off|toggle)|\
    scroll-(bottom|down(-and-cancel)?|middle|top|up)|\
    search-(again|backward(-incremental|-text)?|forward(-incremental|-text)?|reverse)|\
    select-(line|word)|stop-selection|toggle-position|top-line"
  # Ref: Manual page: Windows And Panes
  # https://man.openbsd.org/OpenBSD-current/man1/tmux.1#break-pane
  window_pane_cmd__var: "\
    break(-pane|p)|capture(-pane|p)|choose-(client|tree)|customize-mode|\
    find(-window|w)|join(-pane|p)|kill(-pane|p|-window|w)|\
    last(-pane|p|-window)?|link(-window|w)|list-(panes|windows)|\
    move(-pane|p|-window|w)|pipe(-pane|p)|prev(ious-(layout|window)|l)?|\
    resize(-pane|p|-window|w)|respawn(-pane|p|-window|w)|rotate(-window|w)|\
    select(-pane|p|-window|w)|split(-window|w)|\
    swap(-pane|p|-window|w)|unlink(-window|w)"
  # Ref: Manual page: Key Bindings
  key_cmd__var: "list-keys|send(-keys|-prefix)?"
  # Ref: Manual page: Status Line
  status_cmd__var: "\
    clear(-prompt-history|phist)|command-prompt|confirm(-before)?|menu|popup"
  # Ref: Manual page: Buffers
  buffer_cmd__var: "\
    choose-buffer|clear(-history|hist)|delete(-buffer|b)|list-buffers|\
    load(-buffer|b)|paste(-buffer|b)|save(-buffer|b)"
  # Ref: Manual page: Miscellaneous
  misc_cmd__var: "clock-mode|if(-shell)?|run(-shell)?|wait(-for)?"

  # MARK: other vars

  # Layout-name for select-layout command.
  # > The following layouts are supported:
  layout_name__var: "\
    even-(horizontal|vertical)|\
    main-(horizontal(-mirrored)?|vertical(-mirrored)?)|tiled"
